syntax = "proto3";

import "google/protobuf/timestamp.proto";

message StringInput {
    string string_value = 1;
}

message MinerList {
    repeated bytes public_keys = 1;
}

message Hash {
    bytes value = 1;
}

message Address {
    bytes value = 1;
}

message Transaction {
    Address from_address = 1;
    Address to_address = 2;
    int64 ref_block_number = 3;
    bytes ref_block_prefix = 4;
    string method_name = 5;
    bytes params = 6;
    bytes signature = 10000;
}

message ElectionVotingRecord {
    Address voter = 1;
    string candidate = 2;
    sint64 amount = 3;
    sint64 term_number = 4;
    Hash vote_id = 5;
    sint64 lock_time = 7;
    google.protobuf.Timestamp unlock_timestamp = 10;
    google.protobuf.Timestamp withdraw_timestamp = 11;
    google.protobuf.Timestamp vote_timestamp = 12;
    bool is_withdrawn = 13;
}

message ElectorVote {
    repeated Hash active_voting_record_ids = 1;
    repeated Hash withdrawn_voting_record_ids = 2;
    sint64 active_voted_votes_amount = 3;
    sint64 all_voted_votes_amount = 4;
    repeated ElectionVotingRecord active_voting_records = 5;
    repeated ElectionVotingRecord withdrawn_votes_records = 6;
    bytes public_key = 7;
}

message CandidateVote {
    repeated Hash obtained_active_voting_record_ids = 1;
    repeated Hash obtained_withdrawn_voting_record_ids = 2;
    sint64 obtained_active_voted_votes_amount = 3;
    sint64 all_obtained_voted_votes_amount = 4;
    repeated ElectionVotingRecord obtained_active_voting_records = 5;
    repeated ElectionVotingRecord obtained_withdrawn_votes_records = 6;
    bytes public_key = 7;
}

message PublicKeysList {
    repeated bytes value = 1;
}

message ContractDeploymentInput {
    sint32 category = 1;
    bytes code = 2;
}

message ContractUpdateInput {
    Address address = 1;
    bytes code = 2;
}

message CrossChainTransferInput {
    Address to = 1;
    string symbol = 2;
    sint64 amount = 3;
    string memo = 4;
    int32 to_chain_id = 5;
    int32 issue_chain_id = 6;
}

message MerklePath {
    repeated MerklePathNode merkle_path_nodes = 1;
}

message MerklePathNode{
    Hash hash = 1;
    bool is_left_child_node = 2;
}

message CrossChainReceiveTokenInput {
    int32 from_chain_id = 1;
    int64 parent_chain_height = 2;
    bytes transfer_transaction_bytes = 3;
    MerklePath merkle_path = 4;
}

message GetTokenInfoInput {
    string symbol = 1;
}

message GetBalanceInput {
    string symbol = 1;
    Address owner = 2;
}

message GetBalanceOutput {
    string symbol = 1;
    Address owner = 2;
    sint64 balance = 3;
}

message IssueInput {
    string symbol = 1;
    sint64 amount = 2;
    string memo = 3;
    Address to = 4;
}

message TransferInput {
    Address to = 1;
    string symbol = 2;
    sint64 amount = 3;
    string memo = 4;
}
